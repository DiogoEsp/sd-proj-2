package fctreddit.impl.server.rest.filter;

import fctreddit.utils.SyncPoint;
import jakarta.ws.rs.container.ContainerRequestContext;
import jakarta.ws.rs.container.ContainerRequestFilter;
import jakarta.ws.rs.container.ContainerResponseContext;
import jakarta.ws.rs.container.ContainerResponseFilter;
import jakarta.ws.rs.ext.Provider;

import java.io.IOException;

@Provider
public class VersionFilter implements ContainerResponseFilter, ContainerRequestFilter {

    private final SyncPoint versionManager;

    public static final ThreadLocal<Long> version = new ThreadLocal<>();

    public static final String HEADER_VERSION = " X-FCTREDDIT";

    public VersionFilter(){
        this.versionManager = SyncPoint.getSyncPoint();
    }

    /**
     * This method is executed over every request that is received by the REST server before
     * passing it to the Resource implementation
     */
    @Override
    public void filter(ContainerRequestContext requestContext) throws IOException {
//We want to extract the version from the request header (if any) and if it
        //exists attribute it to the thread local value
        String value = requestContext.getHeaderString(HEADER_VERSION);

        if(value != null && ! value.isEmpty()) { //This means that there was something in the header
            version.set(Long.valueOf(value)); //sets the version on this thread specific object
        }
    }

    /**
     * This method is executed over every response that is generated by the REST resource implementation
     * before sending the response to the client (both success responses and error responses)
     */
    @Override
    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) throws IOException {
        long currentVersion = this.versionManager.getVersion();

        if(currentVersion > -1) {
            responseContext.getHeaders().add(HEADER_VERSION, Long.toString(currentVersion));
        }
    }
}
